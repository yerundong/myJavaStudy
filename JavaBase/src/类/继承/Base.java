package 类.继承;
/*
继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。

继承解决的问题：共性抽取

继承的特性:
1.子类拥有父类非 private 的属性、方法。
2.子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。
3.子类可以用自己的方式实现父类的方法。
4.Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 A 类 -> B 类 -> C 类
5.提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。
6.继承是多态的前提
7.继承的最顶级对象是java.lang.Object，它是祖先。

继承关键字: extends 和 implements
    1.extends关键字：在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。
    2.implements关键字：使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）（待学。。。。。）。

继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，
则默认继承object（这个类在 java.lang 包中，所以不需要 import）祖先类。


super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。
super关键字：
    1.在子类当中，super可以指向父类的this，也可以充当父类的构造函数
    2.可以通过super关键字来实现对父类成员的访问，用来访问父类的成员变量和方法。

super()注意事项：
    1.只能在子类构造函数中执行
    2.只能作为第一个语句执行
    3.一个构造函数只能执行一次super
    4.无参会默认执行父类的构造（隐式的super()），有参必须显示的调用super(...)

访问注意事项：
    1.当访问实例对象的成员变量或方法时，则优先寻找本类当中是否存在，若有则用，无则向上（父类）寻找，不会向下（子类）寻找
    2.若需访问父类与子类的重名成员变量时，可通过方法获得访问

重载与重写：
    重载（Overload）：方法的名称一样，参数列表【不一样】。
    重写（Override）（覆盖、覆写）：方法的名称一样，参数列表【也一样】；子类覆盖父类方法。

方法重写的注意事项：

1. 必须保证父子类之间方法的名称相同，参数列表也相同。

2.重写的注解：@Override 写在方法前面，用来检测是不是有效的正确覆盖重写（可写可不写）

3. 子类重写方法的返回值必须【小于等于】父类方法的返回值范围。
小扩展提示：java.lang.Object类是所有类的公共最高父类（祖宗类），java.lang.String就是Object的子类。

3. 子类重写方法的权限必须【大于等于】父类方法的权限修饰符。
小扩展提示：public > protected > (default) > private

*/
public class Base {
    public static void main(String[] args) {
        Car car1 = new Car("小汽车", "1.5t");
        // car1.says();
        car1.pop();
        System.out.println(car1.tip);

    }
}
